[{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 VizSeasonalGams authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting started with VizSeasonalGams","text":"VizSeasonalGams package make understanding complex generalized additive models (GAMs) fit R package mgcv easier, producing plots model predictions relevant combinations factorial predictors. package originally motivated modeling seasonal patterns angler catch rates different classes fish different years, sometimes incorporating categorical predictors (gear type, region). fitted model allowed seasonal patterns vary based categorical predictors, became unwieldy look model predictions varied across different combinations predictor values. compounded wanting compare model predictions models different structures. VizSeasonalGams automates process visualizing model predictions fitted mgcv models, allowing us focus understanding model rather writing visualization code. looking package already familiar gratia package, highly recommend taking look well. gratia useful robust toolkit working mgcv models, covers things like model diagnostics, visualizing partial effects plots, estimating derivatives. ’s fantastic! developed VizSeasonalGams fulfil role gratia currently: visualizing model predictions.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Getting started with VizSeasonalGams","text":"vignette use examples fish counts varying across day year ways depend categorical predictors (year, fish class). However, despite name, VizSeasonalGams limited gams seasonal patterns. mgcv model least one smooth across continuous variable work – example, temperature response curves, dose-response curves. facilitate exploring package, VizSeasonalGams includes two simulation functions. simulate_data generates reasonable fish count data fit gam model: “doy” day year, yearfac year (factor), mark_stage fish classification (“Jack” = smaller fish, “AD Adult” = marked adult, “UM adult” = unmarked adult). simulate_gam() uses simulate_data(), fits mgcv model form fish_count ~ mark_stage + s(doy, = mark_stage, k = 20) + yearfac, returns fitted model. explorations, sufficient simply use output simulate_gam() test visualization functions VizSeasonalGams. clarity fit model explicitly . model smooth across day year varies fish stage, total catch also affected year. workhorse function VizSeasonalGams plot_seasonal_gam_panels(), makes tibble categorical predictors model prediction plots. combination categorical predictors represented original data given row, .$plot column row shows “panels” model predictions function key variable smoothed across (defaults “doy”, can specified optional plot_by argument). example: can access plots directly, like :  models contain additional continuous variable, median value across original dataset used creating panels. tibble panels (subset thereof) can presented joint plot using wrap_panels() grid_panels(). intended fill similar roles tofacet_wrap facet_grid. wrap_panels() simplest, simply combines panels order:  grid_panels() organizes panels based two categorical predictors represented panels tibble:  functions can work subsetted versions panel tibble. example, imagine interested smooths 2021:  perhaps want take grid view, jack results look bit funky want remove :","code":"data = simulate_data()  head(data) ## # A tibble: 6 × 5 ##     doy  year mark_stage yearfac fish_count ##   <int> <int> <fct>      <fct>        <int> ## 1   208  2021 Jack       2021             0 ## 2   208  2021 AD Adult   2021             2 ## 3   208  2021 UM Adult   2021             1 ## 4   208  2021 Jack       2021             0 ## 5   208  2021 AD Adult   2021             0 ## 6   208  2021 UM Adult   2021             1 model = gam(fish_count ~ mark_stage +               s(doy, by = mark_stage, k = 20) +               yearfac,             method = \"REML\",             family = \"nb\",             data = data) panels = model |>    plot_seasonal_gam_panels() ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac. panels ## # A tibble: 9 × 3 ##   mark_stage yearfac .plot      ##   <fct>      <fct>   <list>     ## 1 Jack       2021    <patchwrk> ## 2 AD Adult   2021    <patchwrk> ## 3 UM Adult   2021    <patchwrk> ## 4 Jack       2022    <patchwrk> ## 5 AD Adult   2022    <patchwrk> ## 6 UM Adult   2022    <patchwrk> ## 7 Jack       2023    <patchwrk> ## 8 AD Adult   2023    <patchwrk> ## 9 UM Adult   2023    <patchwrk> panels$.plot[[1]] wrap_panels(panels) grid_panels(panels, column_var = \"yearfac\", row_var = \"mark_stage\") panels |>    filter(yearfac == \"2021\") |>    wrap_panels() panels |>    filter(mark_stage != \"Jack\") |>    grid_panels(column_var = \"yearfac\", row_var = \"mark_stage\")"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"generalizing-plots","dir":"Articles","previous_headings":"","what":"Generalizing plots","title":"Getting started with VizSeasonalGams","text":"default behavior plot_seasonal_gam_panels based common use case: looking seasonal smooths across day year variable labeled “doy”. looking smooths across variable names types data, can change values arguments plot_by labeler_x. plot_by can take name continuous variable used model, use determine x axis panel. labeler_x can take function, uses label x axis per ggplot::scale_x_continuous(labels = labeler_x). default uses doy_2md() function defined VizSeasonalGams, translates numeric day year month-day string. Setting labeler_x NULL instead present x labels original values. Depending scale data ’re trying plot, may also need change argument across_increment. term defines x resolution predictions plots defaults 1; appropriate resolution daily samples (e.g., one prediction per day), appropriate x variable much smaller range. example, visualize one simpler models fit excellent Pedersen et al. 2019. use built-CO2 data. ’re smoothing across log(concentration). Note presently plot_seasonal_gam_panels properly handle predictors functions. instead using log(conc) directly model, need create new variable log_conc log concentration, use model. make three changes default behavior plot_seasonal_gam_panels: change plot_by reflect x variable interest, change labeler_x NULL x axis longer date, set across_increment 0.01 reflect smaller range x axis values.","code":"## recode plant from ordered to unordered CO2 <- transform(CO2, Plant_uo=factor(Plant, ordered=FALSE)) |>    mutate(log_conc = log(conc),          log_uptake = log(uptake))  ## fit model model_co2 <- gam(log_uptake ~ s(log_conc, k=5, bs = \"tp\") +                    s(Plant_uo, k=12, bs=\"fs\", m=2),                  data=CO2, method=\"REML\")  model_co2 |>    plot_seasonal_gam_panels(plot_by = \"log_conc\",                            labeler_x = NULL,                            across_increment = 0.01) |>    wrap_panels() ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: Plant_uo."},{"path":[]},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"modifying-panels","dir":"Articles","previous_headings":"Customizing plots","what":"Modifying panels","title":"Getting started with VizSeasonalGams","text":"default plot_seasonal_gam_panels() includes data coverage plot bottom panel. plot takes role rugplots typicaly mgcv gratia. compared rugplots, approach takes realestate, gives information multiple records can x value (commonly case using day--year; multiple surveys may occur day). behavior can turned plot_coverage = FALSE:   (Presently implementation rugplots, coverage plots along X axis; reach developer features value.) Sometimes can useful include multiple prediction curves single panel. optional argument color_by plot_seasonal_gam_panels() can take name categorical variable data order just .  including multiple curves panel, confidence envelopes can make interpretation challenging. Use include_cis = FALSE turn envelope plotting:  Note including color_by variable removes column resulting panels tibble; means column longer available grid_panels() calls.","code":"temp = model |>    plot_seasonal_gam_panels(plot_coverage = FALSE) ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac. temp$.plot[[1]] wrap_panels(temp) model |>    plot_seasonal_gam_panels(color_by = \"yearfac\") |>    wrap_panels(ncol = 1) model |>    plot_seasonal_gam_panels(color_by = \"yearfac\", include_cis = FALSE) |>    wrap_panels(ncol = 1) model |>    plot_seasonal_gam_panels() ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac. ## # A tibble: 9 × 3 ##   mark_stage yearfac .plot      ##   <fct>      <fct>   <list>     ## 1 Jack       2021    <patchwrk> ## 2 AD Adult   2021    <patchwrk> ## 3 UM Adult   2021    <patchwrk> ## 4 Jack       2022    <patchwrk> ## 5 AD Adult   2022    <patchwrk> ## 6 UM Adult   2022    <patchwrk> ## 7 Jack       2023    <patchwrk> ## 8 AD Adult   2023    <patchwrk> ## 9 UM Adult   2023    <patchwrk> model |>    plot_seasonal_gam_panels(color_by = \"yearfac\") ## # A tibble: 3 × 2 ##   mark_stage .plot      ##   <fct>      <list>     ## 1 Jack       <patchwrk> ## 2 AD Adult   <patchwrk> ## 3 UM Adult   <patchwrk>"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"shared-scales","dir":"Articles","previous_headings":"Customizing plots","what":"Shared scales","title":"Getting started with VizSeasonalGams","text":"default, panel plotted scale. ensures set model predictions easily interpretable, can make visualizations misleading comparing panels. example, model constructed smooths across day year differ years, include fixed effect years. means looking along rows grid_panels(), easy mistakenly assume predicted fish count identical year.  grid_panels() optional arguments control shared scales: scales_x (controls sharing x axis limits), scales_y (controls sharing y axis limits primary plot), scales_y_coverage (controls sharing y axis coverage plots; ignored coverage plots included). arguments defaults \"free\" (panel varies freely), can take following arguments: \"fixed_column\": panels column share limits specified dimension. \"fixed_row\": panels row share limits specified dimension \"fixed_combination\": panels row x column combination share limits specified dimension. Relevant one panel column x row combination (see ), \"fixed_all\": panels share limits specified dimension. ensure fish counts within row comparable across columns, use `scales_y = “fixed_row”  arguments make possible emphasize differences panels details within panels, needed. example, presenting people focused practical outcomes, may appropriate use “fixed_all”:  default behavior \"free\" scales unless specific need probably best start scales_x = \"fixed_all\". Presently equivalent implementation scales_* arguments wrap_grids() (natural choices grouping panels share scales), adding \"free\" \"fixed_all\" options.","code":"model |>    plot_seasonal_gam_panels() |>    grid_panels(column_var = \"yearfac\", row_var = \"mark_stage\") ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac. model |>    plot_seasonal_gam_panels() |>    grid_panels(column_var = \"yearfac\", row_var = \"mark_stage\",               scales_y = \"fixed_row\") ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac. model |>    plot_seasonal_gam_panels() |>    grid_panels(column_var = \"yearfac\", row_var = \"mark_stage\",               scales_y = \"fixed_all\",               scales_x = \"fixed_all\") ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac."},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"sub-panels-and-augmented-panel-tibbles","dir":"Articles","previous_headings":"","what":"Sub-panels and augmented panel tibbles","title":"Getting started with VizSeasonalGams","text":"First, fun feature grid_panels handles cases multiple rows panel tibble match criterion given row column. example, create dataset bit new data: Jacks different treatment 2022 2023. make interesting, allow smooth across day year vary tratment well mark_stage. Now use grid_panels() year mark_stage, multiple prediction panels several jack treatments. grid_panels problem handling :  Second, wrap_panels grid_panels work panel tibbles rather directly fitted model, can combine tibbles different models. obvious use compare choices model structure fitting options affect resulting predictions. example, different results use Gaussian error distribution instead negative binomial? (helps illustrate ’s valuable specify count distribution count data) ’ll keep making grid “yeafac” “mark_stage”, ’ll subpanels, one model. make results models easily comparable, ’ll set scales_y = \"fixed_combination\". ensure can reasonably compare model subpanels, ensuring differences fish counts mark_stage yearfac don’t make sets model predictions unreadable.  can see negative binomial correctly represents heteroskedasticity, (depending simulation values) may see gaussian predicting negative fish counts. Combining panels tibbles allows us quickly compare consequences choosing different model structures, model fitting settings, even effects modifying data (e.g. removing outliers, reducing sample sizes, etc). fact, use prevalent workflow added ability plot_seasonal_gam_panels() handle : give named list models rather single model, plot_seasonal_gam_panels() create panel tibble model, add $model column value equal model name, return joint panel tibble. (want model column named something else, like actually comparing models fit different datasets prefer label “data”, can modify optional model_label argument.)","code":"data2 = simulate_data() |>    filter(mark_stage == \"Jack\",          yearfac %in% c(\"2022\", \"2023\")) |>    mutate(treatment = \"B\")  data_joint = data |>    mutate(treatment = \"A\") |>    bind_rows(data2) |>    mutate(treatment = as.factor(treatment))  model2 = gam(fish_count ~                 te(doy, mark_stage, treatment, bs = c(\"tp\", \"fs\", \"fs\")) +                 yearfac,              method = \"REML\",              family = \"nb\",              data = data_joint) model2 |>    plot_seasonal_gam_panels() |>    grid_panels(column_var = \"yearfac\", row_var = \"mark_stage\") ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: yearfac, mark_stage, and treatment. model_nb = gam(fish_count ~ mark_stage +                  s(doy, by = mark_stage, k = 20) +                  yearfac,                method = \"REML\",                family = \"nb\",                data = data)  model_gaus = gam(fish_count ~ mark_stage +                    s(doy, by = mark_stage, k = 20) +                    yearfac,                  method = \"REML\",                  family = \"gaussian\",                  data = data)  panels_nb = model_nb |>    plot_seasonal_gam_panels() |>    mutate(family = \"negative binomial\") ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac. panels_gaus = model_gaus |>    plot_seasonal_gam_panels() |>    mutate(family = \"gaussian\") ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac. panels_joint = bind_rows(panels_nb, panels_gaus)  panels_joint |>    grid_panels(column_var = \"yearfac\", row_var = \"mark_stage\",               scales_x = \"fixed_all\", scales_y = \"fixed_combination\") plot_seasonal_gam_panels(list(\"gaussian\" = model_gaus,                               \"negative binomial\" = model_nb)) |>    grid_panels(column_var = \"yearfac\", row_var = \"mark_stage\") ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac. ## → `color_by` not provided. Defaulting to no color. ## → Options for `color_by`: mark_stage and yearfac."},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"fiddly-graphics-tweaking","dir":"Articles","previous_headings":"","what":"Fiddly graphics tweaking","title":"Getting started with VizSeasonalGams","text":"VizSeasonalGams intended make publication-ready plots, intended produce visualizations can shared collaborators, stakeholders, interested parties. mind several optional arguments change aspects visualization:","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"plot_seasonal_gam_panels","dir":"Articles","previous_headings":"Fiddly graphics tweaking","what":"plot_seasonal_gam_panels()","title":"Getting started with VizSeasonalGams","text":"quant_trimming: restricts prediction range based quantiles available plot_by data combination categorical variables. Defaults 0.01, increase restrict prediction curves regions better supported data. breaks_x: approximate number breaks used plotting x axis. Defaults 3.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"wrap_panels-and-grid_panels","dir":"Articles","previous_headings":"Fiddly graphics tweaking","what":"wrap_panels() and grid_panels()","title":"Getting started with VizSeasonalGams","text":"title_size: changes font size panel titles. Useful working model many categorical predictors – changing title size can help make sure factors readable. Defaults 8.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"wrap_panels-only","dir":"Articles","previous_headings":"Fiddly graphics tweaking","what":"wrap_panels() only","title":"Getting started with VizSeasonalGams","text":"ncol, nrow: determines number columns rows use combining panels single figure; analogous ncol nrow ggplot2::facet_wrap().","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"grid_panels-only","dir":"Articles","previous_headings":"Fiddly graphics tweaking","what":"grid_panels() only","title":"Getting started with VizSeasonalGams","text":"panel_titles: default, grid_panel() includes panel title information isn’t represented column row labels. However, can useful include variable values represented panel (e.g., screenshotting subsets grid). Defaults FALSE, set TRUE complete panel titles. col_title_ratio, row_title_ratio: handling whitespace patchwork plots bit imperfect; two arguments allow tweak relative amount space taken primary content column row titles. Defaults 30. Reduce increase space taken column row titles. font_size: font size column row headers. Defaults 18 new_y_label, new_x_label: allows relabeling X Y axes panels improve readability.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/articles/getting-started.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting started with VizSeasonalGams","text":"Pedersen EJ, Miller DL, Simpson GL, Ross N. 2019. Hierarchical generalized additive models ecology: introduction mgcv. PeerJ 7:e6876 https://doi.org/10.7717/peerj.6876","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Collin Edwards. Author, maintainer.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Edwards C (2025). VizSeasonalGams: Visualize Fitted MGCV Models Seasonal Smooths. R package version 0.2.1, https://github.com/cbedwards-dfw/VizSeasonalGams.","code":"@Manual{,   title = {VizSeasonalGams: Visualize Fitted MGCV Models With Seasonal Smooths},   author = {Collin Edwards},   year = {2025},   note = {R package version 0.2.1},   url = {https://github.com/cbedwards-dfw/VizSeasonalGams}, }"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/index.html","id":"vizseasonalgams","dir":"","previous_headings":"","what":"Visualize Fitted MGCV Models With Seasonal Smooths","title":"Visualize Fitted MGCV Models With Seasonal Smooths","text":"goal VizSeasonalGams streamline plotting fitted gams incorporate seasonal component (e.g., smooths across day year). tools can work models include smooth interest across continuous variable, documentation default assuming data model include \"doy\" contains day year. can provide alternate variable name optional plot_by variable.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualize Fitted MGCV Models With Seasonal Smooths","text":"can install development version VizSeasonalGams GitHub :","code":"pak::pak(\"cbedwards-dfw/VizSeasonalGams\")"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/VizSeasonalGams-package.html","id":null,"dir":"Reference","previous_headings":"","what":"VizSeasonalGams: Visualize Fitted MGCV Models With Seasonal Smooths — VizSeasonalGams-package","title":"VizSeasonalGams: Visualize Fitted MGCV Models With Seasonal Smooths — VizSeasonalGams-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/VizSeasonalGams-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"VizSeasonalGams: Visualize Fitted MGCV Models With Seasonal Smooths — VizSeasonalGams-package","text":"Maintainer: Collin Edwards Collin.Edwards@dfw.wa.gov (ORCID)","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2m.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide month from day of year. Uses 2019 as the model year. — doy_2m","title":"Provide month from day of year. Uses 2019 as the model year. — doy_2m","text":"Provide month day year. Uses 2019 model year.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide month from day of year. Uses 2019 as the model year. — doy_2m","text":"","code":"doy_2m(i)"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide month from day of year. Uses 2019 as the model year. — doy_2m","text":"day year","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2m.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide month from day of year. Uses 2019 as the model year. — doy_2m","text":"character form \"Month\"","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2m.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide month from day of year. Uses 2019 as the model year. — doy_2m","text":"","code":"doy_2m(100) #> [1] \"Apr\""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2md.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide month and day from day of year. Uses 2019 as the model year. — doy_2md","title":"Provide month and day from day of year. Uses 2019 as the model year. — doy_2md","text":"Useful labeling function scale_x_continuous scale_y_continuous","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide month and day from day of year. Uses 2019 as the model year. — doy_2md","text":"","code":"doy_2md(i)"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide month and day from day of year. Uses 2019 as the model year. — doy_2md","text":"day year","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide month and day from day of year. Uses 2019 as the model year. — doy_2md","text":"character form \"Month day\"","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/doy_2md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide month and day from day of year. Uses 2019 as the model year. — doy_2md","text":"","code":"doy_2md(100) #> [1] \"Apr 10\""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/grid_panels.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — grid_panels","title":"Title — grid_panels","text":"Title","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/grid_panels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — grid_panels","text":"","code":"grid_panels(   panels_df,   column_var,   row_var,   scales_x = c(\"free\", \"fixed_column\", \"fixed_row\", \"fixed_all\", \"fixed_combination\"),   scales_y = c(\"free\", \"fixed_column\", \"fixed_row\", \"fixed_all\", \"fixed_combination\"),   scales_y_coverage = c(\"free\", \"fixed_column\", \"fixed_row\", \"fixed_all\",     \"fixed_combination\"),   panel_titles = FALSE,   col_title_ratio = 30,   row_title_ratio = 30,   font_size = 18,   new_y_label = NULL,   new_x_label = NULL,   title_size = 8 )"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/grid_panels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — grid_panels","text":"panels_df dataframe plot_seasonal_gam_panels. column_var 1 dimensional character vector variable defining columns grid. Must factor variable present panels_df. row_var column_var, defines rows grid scales_x Allows shared x limits panels within column (\"fixed_column\"), row (\"fixed_row\"), column x row combinations (\"fixed_combination\"; useful one panel matches row x column criterion). Defaults allowing panel x scale (\"free\"). scales_y scales_x, y limits. applied optional coverage plots within panel. scales_y_coverage scales_y, applied optional coverage plots. panel_titles Include panel information panel title even redundant rows/panels? Useful debugging screenshotting sections. Logical, defaults false col_title_ratio much bigger content column labels? Numeric, defaults 30. row_title_ratio col_title_ratio, ratio content row labels. font_size Size row column labels. Numeric, defaults 18. new_y_label Optional, replaces Y axis label primary plots panels (data coverage histograms). character vector, defaults NULL. new_x_label Optional, replaces X axis label panels. Character vector, defaults NULL. title_size size panel title text. Numeric, defaults 8.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/grid_panels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — grid_panels","text":"patchwork object","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/parse_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse model terms — parse_terms","title":"Parse model terms — parse_terms","text":"Provides names model response predictors","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/parse_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse model terms — parse_terms","text":"","code":"parse_terms(model)"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/parse_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse model terms — parse_terms","text":"model mgcv model object.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/parse_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse model terms — parse_terms","text":"list components response (response variable name), predictors_factor (names factor/character predictors), predictors_numeric (names numeric predictors).","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/plot_seasonal_gam_panels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tibble of predictors and prediction plots — plot_seasonal_gam_panels","title":"Create tibble of predictors and prediction plots — plot_seasonal_gam_panels","text":"Creates tibble represented combinations factor variables data, includes model model predictions across key continuous variable (plot_by, defaults \"doy\") setting continuous variables median. plots within tibble framework, easy filter desired combinations variables plot . (e.g., model might fit 20 years 13 spatial units, tibble can rapidly filtered just years desired spatial unit, spatial units desired year). model named list mgcv models, result combination panel tibbles fitted model, additional column $model identify models used generate panel. can make easy compare modeling choices change predictions.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/plot_seasonal_gam_panels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tibble of predictors and prediction plots — plot_seasonal_gam_panels","text":"","code":"plot_seasonal_gam_panels(   model,   color_by = NULL,   plot_by = \"doy\",   across_increment = 1,   quant_trimming = 0.01,   include_cis = TRUE,   plot_coverage = TRUE,   breaks_x = 3,   model_label = \"model\",   labeler_x = VizSeasonalGams::doy_2md,   verbose = TRUE )"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/plot_seasonal_gam_panels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tibble of predictors and prediction plots — plot_seasonal_gam_panels","text":"model GAM model object mgcv, named list fitted mgcv models color_by Variable color predictions . Defaults NULL, case curves black panel one set predictions. used, color_by necessarily reduces dimensionalality output 1. plot_by single string specifying variable plot across. Defaults \"doy\". across_increment numeric value specifying increment plot_by variable. Defaults 1. quant_trimming numeric value 0 1 defining quantile-based trimming – provides buffer outmost observations outmost plot predictions. Defaults 0.01; increase plot predictions edges misleading. include_cis plot confidence envelope? Logical, defaults TRUE plot_coverage Add histogram bottom panel data coverage? Logical, defaults TRUE. breaks_x Approximate number ticks use X axis, useful ensure text legible. Numeric, defaults 3. quirks ggplot works (patchwork combination process), plots may show exactly breaks_x number ticks, can still manipulate actual tick number changing breaks_x. model_label Name apply model identifier column generated providing list mgcv models model argument. labeler_x Function used apply x axis labels. Defaults \"doy_2md\" turns numeric day year month day. value NULL use identity. verbose Provide context? Logical, defaults TRUE","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/plot_seasonal_gam_panels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tibble of predictors and prediction plots — plot_seasonal_gam_panels","text":"Tibble, column factor predictor model. $.plot column contains plot panels.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/predict_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict GAM across reasonable values — predict_gam","title":"Predict GAM across reasonable values — predict_gam","text":"Predicts gam output. Primarily internal tool, used plot_seasonal_gam_panels.R.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/predict_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict GAM across reasonable values — predict_gam","text":"","code":"predict_gam(   model,   plot_by = \"doy\",   across_increment = 1,   quant_trimming = 0.01,   verbose = TRUE )"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/predict_gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict GAM across reasonable values — predict_gam","text":"model GAM model object mgcv, named list fitted mgcv models plot_by single string specifying variable plot across. Defaults \"doy\". across_increment numeric value specifying increment plot_by variable. Defaults 1. quant_trimming numeric value 0 1 defining quantile-based trimming – provides buffer outmost observations outmost plot predictions. Defaults 0.01; increase plot predictions edges misleading. verbose Provide context? Logical, defaults TRUE","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/predict_gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict GAM across reasonable values — predict_gam","text":"data frame predictions, confidence intervals, predictor values.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate fish count data — simulate_data","title":"Simulate fish count data — simulate_data","text":"Simple function generate reasonable-shaped creel sample data. Useful testing / demonstrating plotting functions. can (typically ) used without providing arguments; several aspects simulated data (e.g. # years simulated, number sampeles) can modified optional arguments.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate fish count data — simulate_data","text":"","code":"simulate_data(   n.per.year = 60,   years = 2021:2023,   doy.limits = c(200, 300),   middle.doy = 250,   samples_per_day_limits = c(4, 10) )"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate fish count data — simulate_data","text":"n.per.year single numeric value defining number samples per year. Defaults 60. years numeric vector defining \"years\" factor. Defaults 2021:2023 doy.limits numeric vector defining minimum maximum day year simulate sampling. Length 2. Optional. middle.doy numeric defining day year general peak activity. Defaults 250. samples_per_day_limits numeric vector length 2. Optional.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate fish count data — simulate_data","text":"data frame columns day year, year, mark stage, year factor, simulated fish counts.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/simulate_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate mgcv gam model for demonstration purposes — simulate_gam","title":"Simulate mgcv gam model for demonstration purposes — simulate_gam","text":"Uses simulate_data(), fits negative binomial gam model response fish_count  using predictor variables mark_stage (\"Jack\", \"AD Adult\", \"UM Adult\"), yearfac (factor version year), smooth across doy (numeric day year). Output suitable model plot_seasonal_gam_panels().","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/simulate_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate mgcv gam model for demonstration purposes — simulate_gam","text":"","code":"simulate_gam()"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/simulate_gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate mgcv gam model for demonstration purposes — simulate_gam","text":"fitted mgcv model","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/simulate_gam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate mgcv gam model for demonstration purposes — simulate_gam","text":"","code":"if (FALSE) { # \\dontrun{ model = simulate_gam() model_panels = plot_seasonal_gam_panels(model) wrap_panels(model_panels) } # }"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/validate_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Test argument to see if it's a numeric within one more constraints. — validate_number","title":"Test argument to see if it's a numeric within one more constraints. — validate_number","text":"Can identify lower /upper limits, either inclusive (limits_inclusive) exclusive (limits_exclusive).","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/validate_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test argument to see if it's a numeric within one more constraints. — validate_number","text":"","code":"validate_number(   x,   limits_inclusive = NULL,   limits_exclusive = NULL,   ...,   arg = rlang::caller_arg(x),   call = rlang::caller_env() )"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/validate_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test argument to see if it's a numeric within one more constraints. — validate_number","text":"x item test limits_inclusive Defines inclusive constraints. provided, numeric vector length 2, first value lower limit second value upper limit. Use NA identify limit ignored. E.g., value less 0 upper limit, use limits_inclusive = c(0, NA). limits_exclusive limits_inclusive, exclusive limits (e.g., value must greater 0). ... additional arguments arg identifying argument calling function call identifying calling function","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/validate_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test argument to see if it's a numeric within one more constraints. — validate_number","text":"None.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/wrap_panels.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap panels from seasonal GAM plots — wrap_panels","title":"Wrap panels from seasonal GAM plots — wrap_panels","text":"Analog facet_wrap() seasonal gam panels. two predictors interest, consider grid_panels() instead.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/wrap_panels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap panels from seasonal GAM plots — wrap_panels","text":"","code":"wrap_panels(panel_df, ncol = NULL, nrow = NULL, title_size = 8)"},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/wrap_panels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap panels from seasonal GAM plots — wrap_panels","text":"panel_df dataframe plot_seasonal_gam_panels. ncol Optional. Force number columns. Numeric, defaults NULL. nrow Optional. Force number rows. Numeric, defaults NULL. title_size size panel title text. Numeric, defaults 8.","code":""},{"path":"https://cbedwards-dfw.github.io/VizSeasonalGams/reference/wrap_panels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap panels from seasonal GAM plots — wrap_panels","text":"wrapped plot object row column labels.","code":""}]
